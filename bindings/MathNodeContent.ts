// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { BracketSize } from "./BracketSize";
import type { BracketStyle } from "./BracketStyle";
import type { DifferentialStyle } from "./DifferentialStyle";
import type { DivisionStyle } from "./DivisionStyle";
import type { MathNode } from "./MathNode";
import type { QuantificationNode } from "./QuantificationNode";
import type { RefinedAddOrSubOperator } from "./RefinedAddOrSubOperator";
import type { RefinedMulOrDivOperation } from "./RefinedMulOrDivOperation";
import type { RelationOperatorNode } from "./RelationOperatorNode";
import type { ScientificNotationStyle } from "./ScientificNotationStyle";
import type { SpecialMiddleScriptNode } from "./SpecialMiddleScriptNode";
import type { UnaryRelationOperatorNode } from "./UnaryRelationOperatorNode";

export type MathNodeContent =
  | "Empty"
  | { "Text": string }
  | { "String": string }
  | { "Bracketed": { inner: MathNode; style: BracketStyle; size: BracketSize } }
  | { "Matrix": { rows: Array<Array<MathNode>> } }
  | {
    "Multiplications": { terms: Array<[RefinedMulOrDivOperation, MathNode]> };
  }
  | { "Additions": { terms: Array<[RefinedAddOrSubOperator, MathNode]> } }
  | {
    "Division": {
      numerator: MathNode;
      denominator: MathNode;
      style: DivisionStyle;
    };
  }
  | {
    "SumNotation": {
      summand: MathNode;
      variable: MathNode | null;
      lower_limit: MathNode | null;
      upper_limit: MathNode | null;
    };
  }
  | {
    "ProductNotation": {
      multiplicand: MathNode;
      variable: MathNode | null;
      lower_limit: MathNode | null;
      upper_limit: MathNode | null;
    };
  }
  | { "Fraction": { numerator: MathNode; denominator: MathNode } }
  | { "Power": { base: MathNode; exponent: MathNode } }
  | { "LogFunction": { base: MathNode | null; parameter: MathNode } }
  | { "Log2": { parameter: MathNode } }
  | { "Log10": { parameter: MathNode } }
  | { "Ln": { parameter: MathNode } }
  | { "UnaryPostfix": { parameter: MathNode; operator: string } }
  | { "UnaryPrefix": { parameter: MathNode; operator: string } }
  | { "Abs": { parameter: MathNode } }
  | { "CustomFunction": { name: MathNode; parameters: Array<MathNode> } }
  | { "SimpleUnaryFunction": { name: string; parameter: MathNode } }
  | { "SimpleMultinaryFunction": { name: string; parameters: Array<MathNode> } }
  | { "Quantity": { number: string; unit: MathNode | null } }
  | {
    "Identifier": {
      body: string;
      pre_script: MathNode | null;
      mid_script: SpecialMiddleScriptNode | null;
      post_script: MathNode | null;
      primes: number;
      is_function: boolean;
    };
  }
  | { "Script": { subscripts: Array<MathNode>; superscripts: Array<MathNode> } }
  | { "Unit": { original_form: MathNode; flattened_form: MathNode } }
  | {
    "ScientificNotation": {
      magnitude: MathNode;
      style: ScientificNotationStyle;
    };
  }
  | { "BaseUnit": string }
  | {
    "Relationship": {
      lhs: MathNode;
      rhs: MathNode;
      operator: RelationOperatorNode;
    };
  }
  | {
    "UnaryRelationship": {
      subject: MathNode;
      predicate: UnaryRelationOperatorNode;
    };
  }
  | { "VariableDefinition": { name: MathNode; definition: MathNode | null } }
  | {
    "FunctionDefinition": {
      custom_function: MathNode;
      definition: MathNode | null;
    };
  }
  | {
    "Limit": {
      function: MathNode;
      variable: string;
      approaching_value: MathNode;
    };
  }
  | {
    "Differential": {
      target: MathNode;
      order: MathNode;
      diff_style: DifferentialStyle;
    };
  }
  | {
    "Integration": {
      integrand: MathNode;
      differentials: Array<[MathNode, MathNode | null, MathNode | null]>;
      domain: MathNode | null;
    };
  }
  | {
    "Theorem": {
      name: string;
      description: string;
      goal: MathNode;
      proofs: Array<MathNode>;
    };
  }
  | {
    "ProofGoal": {
      statement: MathNode;
      quantifiers: Array<MathNode>;
      variables: Array<MathNode>;
    };
  }
  | { "ProofForest": { roots: Array<MathNode> } }
  | {
    "Quantifier": {
      quantification: QuantificationNode;
      variable: MathNode;
      var_type: MathNode;
    };
  }
  | {
    "EmbeddedSentence": { subject: MathNode; verb: string; object: MathNode };
  }
  | { "ElementOf": { target: MathNode } };
