// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { BinaryOperationType } from "./BinaryOperationType";
import type { BinaryOperator } from "./BinaryOperator";
import type { BracketSize } from "./BracketSize";
import type { BracketStyle } from "./BracketStyle";
import type { DifferentialStyle } from "./DifferentialStyle";
import type { DivisionStyle } from "./DivisionStyle";
import type { Identifier } from "./Identifier";
import type { MathNode } from "./MathNode";
import type { MathTextSegment } from "./MathTextSegment";
import type { QuantificationNode } from "./QuantificationNode";
import type { RefinedAddOrSubOperator } from "./RefinedAddOrSubOperator";
import type { RefinedMulOrDivOperation } from "./RefinedMulOrDivOperation";
import type { RelationOperatorNode } from "./RelationOperatorNode";
import type { ScientificNotationStyle } from "./ScientificNotationStyle";
import type { UnaryRelationOperatorNode } from "./UnaryRelationOperatorNode";

export type MathNodeContent =
  | "Empty"
  | { "Text": string }
  | { "String": string }
  | { "Bracketed": { inner: MathNode; style: BracketStyle; size: BracketSize } }
  | { "Matrix": { rows: Array<Array<MathNode>> } }
  | {
    "BinaryOperation": {
      operation_type: BinaryOperationType;
      terms: Array<[BinaryOperator, MathNode]>;
    };
  }
  | {
    "Multiplications": { terms: Array<[RefinedMulOrDivOperation, MathNode]> };
  }
  | { "Additions": { terms: Array<[RefinedAddOrSubOperator, MathNode]> } }
  | {
    "Division": {
      numerator: MathNode;
      denominator: MathNode;
      style: DivisionStyle;
    };
  }
  | {
    "SumNotation": {
      summand: MathNode;
      variable: MathNode | null;
      lower_limit: MathNode | null;
      upper_limit: MathNode | null;
    };
  }
  | {
    "ProductNotation": {
      multiplicand: MathNode;
      variable: MathNode | null;
      lower_limit: MathNode | null;
      upper_limit: MathNode | null;
    };
  }
  | { "Fraction": { numerator: MathNode; denominator: MathNode } }
  | { "Power": { base: MathNode; exponent: MathNode } }
  | { "UnaryPostfixOperation": { parameter: MathNode; operator: MathNode } }
  | { "UnaryPrefixOperation": { parameter: MathNode; operator: MathNode } }
  | { "Abs": { parameter: MathNode } }
  | { "FunctionCall": { name: MathNode; parameters: Array<MathNode> } }
  | {
    "Quantity": {
      number: string;
      scientific_notation: MathNode | null;
      unit: MathNode | null;
    };
  }
  | {
    "ScientificNotation": {
      magnitude: MathNode;
      style: ScientificNotationStyle;
    };
  }
  | { "Identifier": Identifier }
  | { "Unit": { original_form: MathNode; flattened_form: MathNode } }
  | {
    "Relationship": {
      lhs: MathNode;
      rhs: MathNode;
      operator: RelationOperatorNode;
    };
  }
  | {
    "UnaryRelationship": {
      subject: MathNode;
      predicate: UnaryRelationOperatorNode;
    };
  }
  | { "VariableDefinition": { name: MathNode; definition: MathNode | null } }
  | {
    "FunctionDefinition": {
      custom_function: MathNode;
      definition: MathNode | null;
    };
  }
  | {
    "Limit": {
      function: MathNode;
      variable: string;
      approaching_value: MathNode;
    };
  }
  | {
    "Differential": {
      target: MathNode;
      order: MathNode;
      diff_style: DifferentialStyle;
    };
  }
  | {
    "Integration": {
      integrand: MathNode;
      differentials: Array<[MathNode, MathNode | null, MathNode | null]>;
      domain: MathNode | null;
    };
  }
  | {
    "QuantifiedExpression": {
      quantifier: QuantificationNode;
      variables: Array<MathNode>;
      domain: MathNode | null;
      predicate: MathNode | null;
    };
  }
  | { "RichTextContent": Array<MathTextSegment> }
  | { "And": Array<MathNode> }
  | { "Or": Array<MathNode> }
  | { "Not": MathNode }
  | "True"
  | "False";
