// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AutomatedTacticDisplay } from "./AutomatedTacticDisplay";
import type { CaseDisplayNode } from "./CaseDisplayNode";
import type { InstantiationPair } from "./InstantiationPair";
import type { LinkTarget } from "./LinkTarget";
import type { MatchVerification } from "./MatchVerification";
import type { MathNode } from "./MathNode";
import type { ProofDisplayNode } from "./ProofDisplayNode";
import type { RewriteDirectionDisplay } from "./RewriteDirectionDisplay";
import type { RewriteStep } from "./RewriteStep";
import type { RichText } from "./RichText";
import type { SectionContentNode } from "./SectionContentNode";
import type { SimplificationStep } from "./SimplificationStep";
import type { SubstitutionPreview } from "./SubstitutionPreview";
import type { VariableBindingType } from "./VariableBindingType";

/**
 * Rich display representation of tactic applications
 */
export type TacticDisplayNode = {
  "IntroduceQuantifier": {
    object_description: RichText;
    position: number | null;
    before_state: RichText | null;
    after_state: RichText | null;
  };
} | {
  "IntroduceFreshVariable": {
    target_quantifier: RichText;
    fresh_variable_name: RichText;
    explanation: RichText;
    mathematical_context: RichText | null;
  };
} | {
  "ProvideWitness": {
    target_quantifier: RichText;
    witness_expression: MathNode;
    witness_explanation: RichText;
    verification_steps: Array<SectionContentNode>;
  };
} | {
  "ReorderQuantifiers": {
    original_order: Array<RichText>;
    new_order: Array<RichText>;
    justification: RichText;
  };
} | {
  "UniversalCaseAnalysis": {
    target_quantifier: RichText;
    cases: Array<CaseDisplayNode>;
    exhaustiveness_proof: RichText | null;
  };
} | {
  "IntroduceValueVariable": {
    variable_name: RichText;
    variable_value: MathNode;
    binding_type: VariableBindingType;
    context_explanation: RichText;
    position: number | null;
  };
} | {
  "SubstituteValueVariable": {
    target_variable: RichText;
    substitution_preview: SubstitutionPreview;
    justification: RichText;
  };
} | {
  "RewriteInValueBinding": {
    target_variable: RichText;
    target_subexpression: MathNode;
    replacement: MathNode;
    justification: Array<SectionContentNode>;
    step_by_step: Array<RewriteStep>;
  };
} | {
  "RemoveValueVariable": {
    target_variable: RichText;
    reason: RichText;
    cleanup_explanation: RichText | null;
  };
} | {
  "ExactWith": {
    theorem_name: RichText;
    theorem_statement: RichText;
    instantiation_mapping: Array<InstantiationPair>;
    match_verification: MatchVerification;
    theorem_link: LinkTarget | null;
  };
} | {
  "Rewrite": {
    target_expression: MathNode;
    theorem_name: RichText;
    theorem_rule: RichText;
    instantiation_mapping: Array<InstantiationPair>;
    direction: RewriteDirectionDisplay;
    step_by_step_transformation: Array<RewriteStep>;
    theorem_link: LinkTarget | null;
  };
} | {
  "AssumeImplicationAntecedent": {
    implication_statement: MathNode;
    hypothesis_name: RichText;
    antecedent: MathNode;
    consequent: MathNode;
    context_explanation: RichText;
  };
} | {
  "SplitConjunction": {
    target_conjunction: MathNode;
    conjuncts: Array<MathNode>;
    selected_index: number;
    remaining_goals: Array<MathNode>;
  };
} | {
  "SplitDisjunction": {
    target_disjunction: MathNode;
    disjuncts: Array<MathNode>;
    chosen_index: number;
    chosen_disjunct: MathNode;
    strategy_explanation: RichText;
  };
} | {
  "StatementCaseAnalysis": {
    target_expression: MathNode;
    cases: Array<CaseDisplayNode>;
    exhaustiveness_proof: RichText | null;
  };
} | {
  "Simplify": {
    target_path: Array<number>;
    original_expression: MathNode;
    simplified_expression: MathNode;
    simplification_steps: Array<SimplificationStep>;
    rules_used: Array<RichText>;
  };
} | {
  "Auto": {
    automated_tactic_type: AutomatedTacticDisplay;
    search_depth: number | null;
    tactics_attempted: Array<RichText>;
    successful_path: Array<RichText> | null;
    execution_summary: RichText;
  };
} | {
  "Induction": {
    target_relation: MathNode;
    induction_variable: RichText;
    base_case_value: MathNode;
    base_case_proof: ProofDisplayNode;
    inductive_hypothesis: RichText;
    inductive_step_proof: ProofDisplayNode;
    induction_principle: RichText;
  };
};
